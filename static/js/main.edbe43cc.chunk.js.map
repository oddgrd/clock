{"version":3,"sources":["components/DurationModifiers.js","components/TimerControls.js","components/Timer.js","App.js","index.js"],"names":["up","icon","faAngleUp","size","down","faAngleDown","DurationModifiers","type","breakLength","setBreakLength","setSessionLength","sessionLength","timerState","typeCapitalized","charAt","toUpperCase","slice","typeTimer","className","id","onClick","play","faPlay","pause","faPause","reset","faUndo","TimerControls","toggleTimerState","setTimeLeft","setTimerType","sound","document","getElementById","currentTime","handleReset","Timer","timerType","useState","timeLeft","useEffect","playSound","t","setTimeout","clearTimeout","style","color","seconds","minutesLeft","Math","floor","secondsLeft","minString","secString","secondsToMinutes","preload","src","App","map","index","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.edbe43cc.chunk.js","sourcesContent":["import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faAngleUp, faAngleDown } from \"@fortawesome/free-solid-svg-icons\";\nconst up = <FontAwesomeIcon icon={faAngleUp} size=\"2x\" />;\nconst down = <FontAwesomeIcon icon={faAngleDown} size=\"2x\" />;\nfunction DurationModifiers({\n  type,\n  breakLength,\n  setBreakLength,\n  setSessionLength,\n  sessionLength,\n  timerState,\n}) {\n  const typeCapitalized = type.charAt(0).toUpperCase() + type.slice(1);\n  const typeTimer = type === \"break\" ? breakLength : sessionLength;\n\n  const handleIncrement = () => {\n    if (!timerState) {\n      if (type === \"break\" && breakLength < 60) {\n        setBreakLength((breakLength += 1));\n      }\n      if (type === \"session\" && sessionLength < 60) {\n        setSessionLength((sessionLength += 1));\n      }\n    }\n  };\n  const handleDecrement = () => {\n    if (!timerState) {\n      if (type === \"break\" && breakLength > 1) {\n        setBreakLength((breakLength += -1));\n      }\n      if (type === \"session\" && sessionLength > 1) {\n        setSessionLength((sessionLength += -1));\n      }\n    }\n  };\n\n  return (\n    <div className=\"duration-modifiers\">\n      <h2 id={`${type}-label`} className=\"modifier-label unselectable\">\n        {typeCapitalized} Length\n      </h2>\n      <button\n        id={`${type}-increment`}\n        className=\"increment-button\"\n        onClick={() => handleIncrement()}\n      >\n        {up}\n      </button>\n      <div id={`${type}-length`} className=\"modifier-timer unselectable\">\n        {typeTimer}\n      </div>\n      <button\n        id={`${type}-decrement`}\n        className=\"decrement-button\"\n        onClick={() => handleDecrement()}\n      >\n        {down}\n      </button>\n    </div>\n  );\n}\n\nexport default DurationModifiers;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPause, faPlay, faUndo } from \"@fortawesome/free-solid-svg-icons\";\nconst play = <FontAwesomeIcon icon={faPlay} size=\"2x\" />;\nconst pause = <FontAwesomeIcon icon={faPause} size=\"2x\" />;\nconst reset = <FontAwesomeIcon icon={faUndo} size=\"2x\" />;\nfunction TimerControls({\n  setBreakLength,\n  setSessionLength,\n  timerState,\n  toggleTimerState,\n  setTimeLeft,\n  setTimerType,\n}) {\n  const handleReset = () => {\n    toggleTimerState(false);\n    setTimerType(\"Session\");\n    setTimeLeft(25 * 60);\n    setBreakLength(5);\n    setSessionLength(25);\n    const sound = document.getElementById(\"beep\");\n    sound.currentTime = 0;\n    sound.pause();\n  };\n  const handlePlayPause = () => {\n    toggleTimerState(!timerState);\n  };\n  return (\n    <div className=\"media-controls\">\n      <button id=\"start_stop\" onClick={() => handlePlayPause()}>\n        {play}\n        {pause}\n      </button>\n      <button id=\"reset\" onClick={() => handleReset()}>\n        {reset}\n      </button>\n    </div>\n  );\n}\n\nexport default TimerControls;\n","import { React, useEffect, useState } from \"react\";\nimport TimerControls from \"./TimerControls\";\n\nfunction Timer({\n  sessionLength,\n  timerState,\n  breakLength,\n  setBreakLength,\n  setSessionLength,\n  toggleTimerState,\n  timerType,\n  setTimerType,\n}) {\n  const [timeLeft, setTimeLeft] = useState(sessionLength * 60);\n\n  const secondsToMinutes = (seconds) => {\n    const minutesLeft = Math.floor(seconds / 60);\n    const secondsLeft = seconds % 60;\n    const minString = minutesLeft < 10 ? `0${minutesLeft}` : `${minutesLeft}`;\n    const secString = secondsLeft < 10 ? `0${secondsLeft}` : `${secondsLeft}`;\n    return `${minString}:${secString}`;\n  };\n  const playSound = () => {\n    const sound = document.getElementById(\"beep\");\n    sound.currentTime = 0;\n    sound.play();\n  };\n\n  //Runs when session length is changed\n  useEffect(() => {\n    setTimeLeft(sessionLength * 60);\n  }, [sessionLength]);\n\n  //Runs after every DOM update (on state changes)\n  useEffect(() => {\n    if (timeLeft === 0) {\n      playSound();\n      if (timerType === \"Session\") {\n        setTimerType(\"Break\");\n        setTimeLeft(breakLength * 60);\n      } else {\n        setTimerType(\"Session\");\n        setTimeLeft(sessionLength * 60);\n      }\n    }\n    if (timerState) {\n      var t = setTimeout(() => {\n        setTimeLeft(timeLeft - 1);\n      }, 1000);\n      return () => clearTimeout(t);\n    }\n  });\n\n  return (\n    <div className=\"timer-container\">\n      <h2 id=\"timer-label\" style={{ color: timeLeft < 60 ? \"red\" : \"#ffd700\" }}>\n        {timerType}\n      </h2>\n      <h1 id=\"time-left\" style={{ color: timeLeft < 60 ? \"red\" : \"#ffd700\" }}>\n        {secondsToMinutes(timeLeft)}\n      </h1>\n      <TimerControls\n        setBreakLength={setBreakLength}\n        setSessionLength={setSessionLength}\n        timerState={timerState}\n        toggleTimerState={toggleTimerState}\n        setTimeLeft={setTimeLeft}\n        setTimerType={setTimerType}\n      />\n      <audio\n        id=\"beep\"\n        preload=\"auto\"\n        src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\"\n      ></audio>\n    </div>\n  );\n}\n\nexport default Timer;\n","import { React, useState } from \"react\";\nimport \"./App.css\";\nimport DurationModifiers from \"./components/DurationModifiers\";\nimport Timer from \"./components/Timer\";\n\nfunction App() {\n  const [breakLength, setBreakLength] = useState(5);\n  const [sessionLength, setSessionLength] = useState(25);\n  const [timerState, toggleTimerState] = useState(false);\n  const [timerType, setTimerType] = useState(\"Session\");\n\n  const durationModifiers = [\"break\", \"session\"];\n  return (\n    <div className=\"App\">\n      <h1 className=\"heading\">25 + 5 CLOCK</h1>\n      <div className=\"grid-container\">\n        {durationModifiers.map((type, index) => {\n          return (\n            <DurationModifiers\n              key={index}\n              type={type}\n              breakLength={breakLength}\n              setBreakLength={setBreakLength}\n              sessionLength={sessionLength}\n              setSessionLength={setSessionLength}\n              timerState={timerState}\n            />\n          );\n        })}\n        <Timer\n          sessionLength={sessionLength}\n          setSessionLength={setSessionLength}\n          timerType={timerType}\n          setTimerType={setTimerType}\n          timerState={timerState}\n          breakLength={breakLength}\n          setBreakLength={setBreakLength}\n          toggleTimerState={toggleTimerState}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport ReactFCCtest from \"react-fcctest\";\nReactDOM.render(\n  <React.StrictMode>\n    <ReactFCCtest />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}