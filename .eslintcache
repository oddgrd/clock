[{"/home/oddgrd/reactApps/clock/src/index.js":"1","/home/oddgrd/reactApps/clock/src/App.js":"2","/home/oddgrd/reactApps/clock/src/components/Timer.js":"3","/home/oddgrd/reactApps/clock/src/components/TimerControls.js":"4","/home/oddgrd/reactApps/clock/src/components/DurationModifiers.js":"5"},{"size":260,"mtime":1612205851951,"results":"6","hashOfConfig":"7"},{"size":1386,"mtime":1612972735825,"results":"8","hashOfConfig":"7"},{"size":2164,"mtime":1612969660011,"results":"9","hashOfConfig":"7"},{"size":1116,"mtime":1612203776899,"results":"10","hashOfConfig":"7"},{"size":1776,"mtime":1612207049198,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"lakym",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"/home/oddgrd/reactApps/clock/src/index.js",[],["24","25"],"/home/oddgrd/reactApps/clock/src/App.js",[],"/home/oddgrd/reactApps/clock/src/components/Timer.js",["26"],"import { React, useEffect, useState } from \"react\";\nimport TimerControls from \"./TimerControls\";\n\nfunction Timer({\n  sessionLength,\n  timerState,\n  breakLength,\n  setBreakLength,\n  setSessionLength,\n  toggleTimerState,\n  timerType,\n  setTimerType,\n}) {\n  const [timeLeft, setTimeLeft] = useState(sessionLength * 60);\n\n  const secondsToMinutes = (seconds) => {\n    const minutesLeft = Math.floor(seconds / 60);\n    const secondsLeft = seconds % 60;\n    const minString = minutesLeft < 10 ? `0${minutesLeft}` : `${minutesLeft}`;\n    const secString = secondsLeft < 10 ? `0${secondsLeft}` : `${secondsLeft}`;\n    return `${minString}:${secString}`;\n  };\n  const playSound = () => {\n    const sound = document.getElementById(\"beep\");\n    sound.currentTime = 0;\n    sound.play();\n  };\n\n  //Runs when session length is changed\n  useEffect(() => {\n    setTimeLeft(sessionLength * 60);\n  }, [sessionLength]);\n\n  //Runs after every DOM update (on state changes)\n  useEffect(() => {\n    if (timeLeft === 0) {\n      playSound();\n      if (timerType === \"Session\") {\n        setTimerType(\"Break\");\n        setTimeLeft(breakLength * 60);\n      } else {\n        setTimerType(\"Session\");\n        setTimeLeft(sessionLength * 60);\n      }\n    }\n    if (timerState) {\n      var t = setTimeout(() => {\n        setTimeLeft(timeLeft - 1);\n      }, 1000);\n      return () => clearTimeout(t);\n    }\n  });\n\n  return (\n    <div className=\"timer-container\">\n      <h2 id=\"timer-label\" style={{ color: timeLeft < 60 ? \"red\" : \"#ffd700\" }}>\n        {timerType}\n      </h2>\n      <h1 id=\"time-left\" style={{ color: timeLeft < 60 ? \"red\" : \"#ffd700\" }}>\n        {secondsToMinutes(timeLeft)}\n      </h1>\n      <TimerControls\n        setBreakLength={setBreakLength}\n        setSessionLength={setSessionLength}\n        timerState={timerState}\n        toggleTimerState={toggleTimerState}\n        setTimeLeft={setTimeLeft}\n        setTimerType={setTimerType}\n      />\n      <audio\n        id=\"beep\"\n        preload=\"auto\"\n        src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\"\n      ></audio>\n    </div>\n  );\n}\n\nexport default Timer;\n","/home/oddgrd/reactApps/clock/src/components/TimerControls.js",[],"/home/oddgrd/reactApps/clock/src/components/DurationModifiers.js",[],{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":35,"column":3,"nodeType":"33","endLine":35,"endColumn":12,"suggestions":"34"},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setTimeLeft'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [timeLeft, timerState, timerType, setTimerType, breakLength, sessionLength] as a second argument to the useEffect Hook.","Identifier",["37"],"no-global-assign","no-unsafe-negation",{"desc":"38","fix":"39"},"Add dependencies array: [timeLeft, timerState, timerType, setTimerType, breakLength, sessionLength]",{"range":"40","text":"41"},[1379,1379],", [timeLeft, timerState, timerType, setTimerType, breakLength, sessionLength]"]